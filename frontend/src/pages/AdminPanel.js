import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { signOut } from "firebase/auth";
import { auth, db } from "../firebase";
import { collection, addDoc, getDocs, query, orderBy, serverTimestamp } from "firebase/firestore";
import "../styles/AdminPanel.css"; // Ensure correct styles

const AdminPanel = () => {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [poems, setPoems] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchPoems = async () => {
      try {
        const q = query(collection(db, "poems"), orderBy("createdAt", "asc")); // Sort by createdAt (ascending)
        const querySnapshot = await getDocs(collection(db, "poems"));
        const poemsData = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setPoems(poemsData);
      } catch (error) {
        console.error("Error fetching poems:", error);
      }
    };

    fetchPoems();
  }, []);

  const handleAddChapter = async () => {
    if (!title || !content) {
      alert("рдХреГрдкрдпрд╛ рд╕рд░реНрд╡ рдлреАрд▓реНрдб рднрд░рд╛!");
      return;
    }

    try {
      const docRef = await addDoc(collection(db, "poems"), {
        title,
        content,
        createdAt: serverTimestamp(), // Add timestamp for sorting
      });

      alert("рдЕрдзреНрдпрд╛рдп рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рдЬреЛрдбрд▓рд╛!");

      setPoems([...poems, { id: docRef.id, title, content, createdAt: new Date() }]);
      setTitle("");
      setContent("");
    } catch (error) {
      console.error("Error adding chapter:", error);
      alert("рдЕрдзреНрдпрд╛рдп рдЬреЛрдбрддрд╛рдирд╛ рддреНрд░реБрдЯреА: " + error.message);
    }
  };

  const handleLogout = async () => {
    try {
      await signOut(auth);
      alert("рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рд▓реЙрдЧрдЖрдЙрдЯ рдЭрд╛рд▓реЗ!");
      navigate("/"); // Redirect to Home
    } catch (error) {
      console.error("Error logging out:", error);
      alert("рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░рддрд╛рдирд╛ рддреНрд░реБрдЯреА: " + error.message);
    }
  };

  return (
    <div className="admin-panel">
      <h2>ЁЯО╡ рдкреНрд░рд╢рд╛рд╕рдХ рдкреЕрдиреЗрд▓ ЁЯО╡</h2>

      <div className="form-container">
        <input
          type="text"
          placeholder="рдЕрдзреНрдпрд╛рдп рд╢реАрд░реНрд╖рдХ..."
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <textarea
          placeholder="рдЕрдзреНрдпрд╛рдп рдордЬрдХреВрд░..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
        />
        <button className="add-chapter" onClick={handleAddChapter}>
          тЮХ рдирд╡реАрди рдЕрдзреНрдпрд╛рдп рдЬреЛрдбрд╛
        </button>
      </div>

      <h3>ЁЯМ┐ рдЕрдзреНрдпрд╛рдп рд╕реВрдЪреА ЁЯМ┐</h3>
      <ul className="poem-list">
        {poems.map((poem) => (
          <li key={poem.id}>{poem.title}</li>
        ))}
      </ul>

      <button className="logout-button" onClick={handleLogout}>
        ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ
      </button>
    </div>
  );
};

export default AdminPanel;
